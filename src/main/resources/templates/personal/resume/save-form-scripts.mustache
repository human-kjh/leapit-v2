<script>
    // 공통 추가 함수 (template 복제해서 추가)
    function addItem(containerSelector, templateId) {
        let container = document.querySelector(containerSelector);
        let template = document.querySelector(templateId);
        let clone = template.content.cloneNode(true);
        container.appendChild(clone);
    }

    // 삭제 버튼 처리 (동적 요소 포함)
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('removeItemBtn')) {
            event.target.closest('.linkItem, .educationItem, .experienceItem, .projectItem, .trainingItem, .etcItem').remove();
        }
    });

    document.getElementById("uploadBtn").addEventListener("click", function () {
        document.getElementById("photoUpload").click();
    });

    document.getElementById("photoUpload").addEventListener("change", function (event) {
        let file = event.target.files[0];
        if (file) {
            let reader = new FileReader();
            reader.onload = function (e) {
                let preview = document.getElementById("photoPreview");
                preview.src = e.target.result;
                preview.style.display = "block";

                let helperText = document.getElementById("photoHelperText");
                if (helperText) {
                    helperText.style.display = "none";
                }
            };
            reader.readAsDataURL(file);
        }
    });

    // saveResume 함수 - 등록하기 버튼 클릭시
    async function saveResume() {
        let requestBody = {
            title: document.querySelector("#title").value,
            summary: document.querySelector("#summary").value,
            selfIntroduction: document.querySelector("#selfIntroduction").value,
            isPublic: document.querySelector("#resumeToggle")?.checked ?? true,
            positionType: document.querySelector("select[name='positionType']").value,
            resumeTechStacks: Array.from(document.querySelectorAll(".tech-checkbox:checked")).map(cb => cb.value),


            links: Array.from(document.querySelectorAll('.linkItem')).map(item => ({
                title: item.querySelectorAll('input')[0].value,
                url: item.querySelectorAll('input')[1].value
            })),

            educations: Array.from(document.querySelectorAll('.educationItem')).map(item => ({
                graduationDate: item.querySelector('input[type="month"]').value ? item.querySelector('input[type="month"]').value + "-01" : null,
                isDropout: item.querySelectorAll('input')[1].checked,
                schoolName: item.querySelectorAll('input')[2].value,
                major: item.querySelectorAll('input')[3].value,
                educationLevel: item.querySelectorAll('select')[0].value, // 첫 번째 select (학력구분)
                gpa: item.querySelectorAll('input')[4].value,
                gpaScale: item.querySelectorAll('select')[1].value // 두 번째 select (GPA 기준)
            })),

            experiences: Array.from(document.querySelectorAll('.experienceItem')).map(item => ({
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                isEmployed: item.querySelectorAll('input')[2].checked,
                companyName: item.querySelectorAll('input')[3].value,
                summary: item.querySelectorAll('input')[4].value,
                position: item.querySelectorAll('input')[5].value,
                responsibility: item.querySelectorAll('input')[6].value,
                techStacks: Array.from(item.querySelectorAll('.experience-tech-checkbox:checked')).map(cb => cb.value)
            })),

            projects: Array.from(document.querySelectorAll('.projectItem')).map(item => ({
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                isOngoing: item.querySelectorAll('input')[2].checked,
                title: item.querySelectorAll('input')[3].value,
                summary: item.querySelectorAll('input')[4].value,
                description: item.querySelector('textarea').value,
                repositoryUrl: item.querySelectorAll('input')[5].value,
                techStacks: Array.from(item.querySelectorAll('.project-tech-checkbox:checked')).map(cb => cb.value)
            })),

            trainings: Array.from(document.querySelectorAll('.trainingItem')).map(item => ({
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                isOngoing: item.querySelectorAll('input')[2].checked,
                courseName: item.querySelectorAll('input')[3].value,
                institutionName: item.querySelectorAll('input')[4].value,
                description: item.querySelector('textarea').value,
                techStacks: Array.from(item.querySelectorAll('.training-tech-checkbox:checked')).map(cb => cb.value)
            })),

            etcs: Array.from(document.querySelectorAll('.etcItem')).map(item => ({
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                hasEndDate: item.querySelectorAll('input')[2].checked,
                title: item.querySelectorAll('input')[3].value,
                etcType: item.querySelector('select').value,
                institutionName: item.querySelectorAll('input')[4].value,
                description: item.querySelector('textarea').value
            }))
        };

        let formData = new FormData();
        formData.append("dto", new Blob([JSON.stringify(requestBody)], { type: "application/json" }));

        const photoFile = document.querySelector("#photoUpload").files[0];
        if (photoFile) {
            formData.append("photoFile", photoFile); // @RequestPart("photoFile")
        }

        console.log("최종 전송 데이터:", requestBody);
        // 서버로 전송
        try {
            let response = await fetch('/s/api/personal/resume', {
                method: 'POST',
                body: formData
            });

            let responseBody = await response.json(); // 딱 한 번만 호출

            if (response.ok) {
                alert('이력서가 성공적으로 저장되었습니다.');
                location.href = "/s/personal/resume";
            } else {
                const rawMsg = responseBody.msg || '알 수 없는 오류';
                const userMsg = rawMsg.includes(":") ? rawMsg.split(":")[1] : rawMsg;
                alert('이력서 저장 실패: ' + userMsg.trim());
            }
        } catch (error) {
            console.error('에러 발생', error);
            alert('서버 연결에 실패했습니다.');
        }
    }

    // 기술스택 선택 시 버튼에 표시 업데이트
    document.addEventListener('DOMContentLoaded', () => {
        let checkboxes = document.querySelectorAll('.tech-checkbox');
        let displayBtn = document.getElementById('selectedTechStacksBtn');

        checkboxes.forEach(cb => {
            cb.addEventListener('change', () => {
                let selected = Array.from(checkboxes)
                        .filter(box => box.checked)
                        .map(box => box.nextElementSibling.innerText);
                displayBtn.innerText = selected.length > 0 ? selected.join(', ') : '기술스택을 선택하세요';
            });
        });
    });

    // 경험, 프로젝트, 교육 기술스택 선택 시 버튼에 표시 업데이트
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('experience-tech-checkbox') ||
                event.target.classList.contains('project-tech-checkbox') ||
                event.target.classList.contains('training-tech-checkbox')) {

            let container = event.target.closest('.dropdown');
            let button = container.querySelector('button');
            let selected = Array.from(container.querySelectorAll('input:checked')).map(cb => cb.nextElementSibling.innerText);

            if (selected.length > 0) {
                button.innerText = selected.join(', ') + ' 선택됨';
            } else {
                button.innerText = '기술스택을 선택하세요';
            }
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        let toggleMapping = [
            { toggleId: 'toggle-photo', sectionId: 'section-photo' },
            { toggleId: 'toggle-summary', sectionId: 'section-summary' },
            { toggleId: 'toggle-link', sectionId: 'section-link' },
            { toggleId: 'toggle-experience', sectionId: 'section-experience' },
            { toggleId: 'toggle-training', sectionId: 'section-training' },
            { toggleId: 'toggle-etc', sectionId: 'section-etc' }
        ];

        toggleMapping.forEach(function (mapping) {
            let toggle = document.getElementById(mapping.toggleId);
            let section = document.getElementById(mapping.sectionId);

            if (toggle && section) {
                // 처음 로딩될 때 상태 적용
                section.style.display = toggle.checked ? 'block' : 'none';

                // 토글될 때마다
                toggle.addEventListener('change', function () {
                    if (this.checked) {
                        section.style.display = 'block';
                    } else {
                        section.style.display = 'none';
                    }
                });
            }
        });
    });
</script>
